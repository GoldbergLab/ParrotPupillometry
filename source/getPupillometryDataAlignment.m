%function alignment = getPupillometryDataAlignment(root)

if ~exist("click_struct", 'var')
    disp('Finding audio clicks...')
    click_struct = makeAudioSyncStruct(root, 0.03, 0.08, "Channel", 1);
    disp('...done')
end

if ~exist("naneye_flash_struct", 'var')
    disp('finding naneye flashes...')
    naneye_flash_struct = makeVideoSyncStruct( ...
        root, ...
        [97, 410, 25, 25], ...
        10, ...
        0.08, ...
        'FrameRate', 48, ...
        'FileRegex', '_naneye.*\.avi', ...
        'MedianWindow', 20, ...
        'PlotOnsets', true ...
        );
    disp('...done')
end

if ~exist("webcam_flash_struct", 'var')
    disp('finding webcam flashes...')
    webcam_flash_struct = makeVideoSyncStruct( ...
        root, ...
        [1, 1, 10, 10], ...
        175, ...
        0.08, ...
        'FrameRate', 45, ...
        'FileRegex', '_camera.*\.avi', ...
        'PlotOnsets', false ...
        );
    disp('...done')
end

sync_struct = struct();
sync_count = 0;
cumulative_samples = 0;

% Get sync/click registration
for audio_file_idx = 1:length(click_struct)
    for onset_num = 1:length(click_struct(audio_file_idx).onsets)
        sync_count = sync_count + 1;
        sync_struct(sync_count).audio_file = click_struct(audio_file_idx).path;
        sync_struct(sync_count).pulse_idx = onset_num;
        sync_struct(sync_count).pulse_onset = click_struct(audio_file_idx).onset(onset_num);
        sync_struct(sync_count).pulse_onset_cumulative = click_struct(audio_file_idx).onset(onset_num) + cumulative_samples;
        % Find corresponding webcam sync pulses
        
    end
    cumulative_samples = cumulative_samples + click_struct(audio_file_idx).num_samples;
end